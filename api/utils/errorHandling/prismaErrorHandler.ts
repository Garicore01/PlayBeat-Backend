import { Prisma } from "@prisma/client";
import { NextFunction, Request, Response } from "express";

/**
 * Middleware that handles errors generated by the prisma orm.
 * @param err Error
 * @param _req Request
 * @param res Response
 * @param next NextFunction
 * @returns
 */
export default async function prismaErrorHandler(
  err: Error,
  _req: Request,
  res: Response,
  next: NextFunction,
) {
  if (!(err instanceof Prisma.PrismaClientKnownRequestError)) return next(err);

  switch (err.code) {
    case "P2002":
      return res
        .status(400)
        .json({ errors: [`the field ${err.meta?.target} is not unique`] });
    case "P2003":
      return res.status(400).json({
        errors: [`required value in ${err.meta?.modelName} is missing`],
      });
    case "P2025":
      return res.status(400).json({
        errors: [`${err.meta?.cause}`],
      });
    default:
      console.debug(
        `Unhandled error with code ${err.code} in prismaErrorHandler`,
      );
      return res.sendStatus(500);
  }
}
